{"version":3,"sources":["components/header.js","components/layout.js","components/bordered-title.js","App.js","serviceWorker.js","index.js"],"names":["Header","siteTitle","small","style","margin","maxWidth","padding","width","display","justifyContent","flexDirection","className","defaultProps","Layout","children","borderTopStyle","borderTopWidth","marginTop","minHeight","paddingTop","Date","getFullYear","BorderedTitle","title","getWeekNumber","d","UTC","getMonth","getDate","setUTCDate","getUTCDate","getUTCDay","yearStart","getUTCFullYear","weekNo","Math","ceil","App","useState","Items","data","setData","useEffect","a","fetch","then","response","json","console","log","fetchPhotos","map","newsItem","undefined","item","key","guid","enclosure","src","url","categories","href","link","contentSnippet","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAGMA,G,MAAS,SAAC,GAAD,EAAGC,UAAH,IAAcC,EAAd,EAAcA,MAAd,OAEb,yBAAKC,MAAO,CAAEC,OAAO,SAAWC,SAAS,QAAUC,QAAQ,mBACzD,4BAAQH,MAAO,CAAEI,MAAO,OAAQC,QAAS,cAAeC,eAAgB,SAAUC,cAAe,QAC/F,0BAAMP,MAAO,CAACK,QAAS,YAEnBN,GACA,0BAAMS,UAAU,cACd,yCAEF,yBAAKA,UAAU,oBAAf,uBAGDT,GACC,0BAAMS,UAAU,oBACd,8CAYZX,EAAOY,aAAe,CACpBX,UAAU,IAGGD,QCIAa,G,MAzBA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUZ,EAAY,EAAZA,MAE1B,OACE,oCACE,kBAAC,EAAD,CAAQD,UAAU,UAAUC,MAAOA,IACnC,yBAAKS,UAAY,kBACf,8BAAOG,GACP,4BAAQX,MAAO,CACbY,eAAe,QACfC,eAAe,MACfC,UAAW,SACXC,UAAU,OACVC,WAAW,WALb,SAOK,IAAIC,MAAOC,cAPhB,cCZOC,EANO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAClB,yBAAKZ,UAAU,sBACX,4BAAKY,GACL,gCCgBR,SAASC,EAAcC,IAErBA,EAAI,IAAIL,KAAKA,KAAKM,IAAID,EAAEJ,cAAeI,EAAEE,WAAYF,EAAEG,aAGrDC,WAAWJ,EAAEK,aAAe,GAAKL,EAAEM,aAAa,IAElD,IAAIC,EAAY,IAAIZ,KAAKA,KAAKM,IAAID,EAAEQ,iBAAiB,EAAE,IAEnDC,EAASC,KAAKC,OAAUX,EAAIO,GAAa,MAAY,GAAG,GAE5D,MAAO,CAACP,EAAEQ,iBAAkBC,GAkDfG,MA/Cf,WAAgB,IAAD,EAEWC,mBAAS,CAACC,MAAO,KAF5B,mBAENC,EAFM,KAEAC,EAFA,KAiBb,OAbAC,qBAAU,YACS,uCAAG,sBAAAC,EAAA,sDAClBC,MAAM,oEACLC,MAAK,SAASC,GACb,OAAOA,EAASC,UACfF,MAAK,SAASL,GACfQ,QAAQC,IAAIT,GACZC,EAAQD,MANQ,2CAAH,qDASjBU,KACC,IAGD,6BACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAe3B,MAAS,UAAYC,EAAc,IAAIJ,MAAQ,KAC9D,yBAAKT,UAAU,YACd6B,EAAKD,MAAMY,KAAI,SAAAC,GACd,YAA8BC,IAAvBD,EAASE,KAAKd,KAErB,6BAASe,IAAKH,EAASI,WACaH,IAAjCD,EAASE,KAAKd,KAAKiB,WAClB,yBAAK9C,UAAU,YAAY+C,IAAKN,EAASE,KAAKd,KAAKiB,UAAUE,MAE/D,yBAAKhD,UAAU,eACb,yBAAKA,UAAU,UAAf,OACA,yBAAKA,UAAU,YAAY,IAAMyC,EAASE,KAAKd,KAAKoB,WAAW,KAEjE,uBAAGC,KAAMT,EAASE,KAAKd,KAAKsB,MAAM,4BAAKV,EAASE,KAAKd,KAAKjB,QAC1D,2BAAI6B,EAASE,KAAKd,KAAKuB,iBAKzB,6CC9DYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.3025b45a.chunk.js","sourcesContent":["import PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle, small}) => (\n\n  <div style={{ margin: `0 auto`, maxWidth: `60rem`, padding: `0rem 0rem 0rem` }}>\n    <header style={{ width: '100%', display: 'inline-flex', justifyContent: 'center', flexDirection: 'row' }}>\n      <span style={{display: 'block'}}></span>\n\n        {!small && (\n          <span className=\"site-title\">\n            <h1>Uutiset .</h1>\n\n          <div className=\"site-description\">Uutisia, hitaammin</div>\n        </span>\n        )}\n        {small && (\n          <span className=\"site-title-small\">\n            <h1>Uutiset .</h1>\n        </span>\n        )}    \n\n  </header>\n</div>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children, small }) => {\n\n  return (\n    <>\n      <Header siteTitle=\"Uutiset\" small={small}/>\n      <div className = \"page-container\">\n        <main>{children}</main>\n        <footer style={{\n          borderTopStyle: `solid`,\n          borderTopWidth: `1px`,\n          marginTop: '1.5rem',\n          minHeight: `100%`,\n          paddingTop: `1.5rem`\n        }}>\n          Â© {new Date().getFullYear()} Tiimi \n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\n\nconst BorderedTitle = ({ title }) => (\n    <div className=\"bordered-title-bar\">\n        <h4>{title}</h4>\n        <div></div>\n    </div>\n)\nexport default BorderedTitle\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Layout from './components/layout'\nimport BorderedTitle from './components/bordered-title'\n\n/* For a given date, get the ISO week number\n *\n * Based on information at:\n *\n *    http://www.merlyn.demon.co.uk/weekcalc.htm#WNR\n *\n * Algorithm is to find nearest thursday, it's year\n * is the year of the week number. Then get weeks\n * between that date and the first day of that year.\n *\n * Note that dates in one year can be weeks of previous\n * or next year, overlap is up to 3 days.\n *\n * e.g. 2014/12/29 is Monday in week  1 of 2015\n *      2012/1/1   is Sunday in week 52 of 2011\n */\nfunction getWeekNumber(d) {\n  // Copy date so don't modify original\n  d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));\n  // Set to nearest Thursday: current date + 4 - current day number\n  // Make Sunday's day number 7\n  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay()||7));\n  // Get first day of year\n  var yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));\n  // Calculate full weeks to nearest Thursday\n  var weekNo = Math.ceil(( ( (d - yearStart) / 86400000) + 1)/7);\n  // Return array of year and week number\n  return [d.getUTCFullYear(), weekNo];\n}\n\nfunction App() {\n\n  const [data, setData] = useState({Items: []});\n\n  useEffect(() => {  \n    const fetchPhotos = async() => {\n      fetch('https://et63potkt6.execute-api.us-east-1.amazonaws.com/dev/hello')\n      .then(function(response) {\n        return response.json();\n      }).then(function(data) {\n        console.log(data); \n        setData(data);\n      });\n    }\n    fetchPhotos();\n  }, []);\n\n  return (\n    <div>\n      <Layout>\n      <BorderedTitle title= { \"Viikko \" + getWeekNumber(new Date())[1]}/>\n      <div className=\"articles\">\n      {data.Items.map(newsItem => {\n        return newsItem.item.data !== undefined ? \n\n        <article key={newsItem.guid}>\n          {newsItem.item.data.enclosure !== undefined && (\n            <img className=\"enclosure\" src={newsItem.item.data.enclosure.url}></img>\n          )}\n          <div className=\"articleInfo\">\n            <div className=\"source\">Yle</div>\n            <div className=\"category\">{\"#\" + newsItem.item.data.categories[0]}</div>\n          </div>\n          <a href={newsItem.item.data.link}><h1>{newsItem.item.data.title}</h1></a>\n          <p>{newsItem.item.data.contentSnippet}</p>\n\n\n        </article>\n        : \n        <div>empty</div>\n        \n      })}\n      </div>\n      </Layout>\n    </div>\n  );\n}\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}